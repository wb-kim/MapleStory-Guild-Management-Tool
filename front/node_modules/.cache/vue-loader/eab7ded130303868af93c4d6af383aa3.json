{"remainingRequest":"D:\\noble_v2\\front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\noble_v2\\front\\src\\components\\SidebarPlugin\\SideBar.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\noble_v2\\front\\src\\components\\SidebarPlugin\\SideBar.vue","mtime":1675075622824},{"path":"D:\\noble_v2\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1675075617215},{"path":"D:\\noble_v2\\front\\node_modules\\babel-loader\\lib\\index.js","mtime":1675075616954},{"path":"D:\\noble_v2\\front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1675075617215},{"path":"D:\\noble_v2\\front\\node_modules\\vue-loader\\lib\\index.js","mtime":1675075622048}],"contextDependencies":[],"result":["\r\nimport MovingArrow from \"./MovingArrow.vue\";\r\nimport SidebarLink from \"./SidebarLink\";\r\nexport default {\r\n  props: {\r\n    title: {\r\n      type: String,\r\n      default: \"Reboot2 Noble\",\r\n    },\r\n    backgroundColor: {\r\n      type: String,\r\n      default: \"black\",\r\n      validator: (value) => {\r\n        let acceptedValues = [\"white\", \"black\", \"darkblue\"];\r\n        return acceptedValues.indexOf(value) !== -1;\r\n      },\r\n    },\r\n    activeColor: {\r\n      type: String,\r\n      default: \"success\",\r\n      validator: (value) => {\r\n        let acceptedValues = [\r\n          \"primary\",\r\n          \"info\",\r\n          \"success\",\r\n          \"warning\",\r\n          \"danger\",\r\n        ];\r\n        return acceptedValues.indexOf(value) !== -1;\r\n      },\r\n    },\r\n    sidebarLinks: {\r\n      type: Array,\r\n      default: () => [],\r\n    },\r\n    autoClose: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n  },\r\n  provide() {\r\n    return {\r\n      autoClose: this.autoClose,\r\n      addLink: this.addLink,\r\n      removeLink: this.removeLink,\r\n    };\r\n  },\r\n  components: {\r\n    MovingArrow,\r\n    SidebarLink,\r\n  },\r\n  computed: {\r\n    /**\r\n     * Styles to animate the arrow near the current active sidebar link\r\n     * @returns {{transform: string}}\r\n     */\r\n    arrowMovePx() {\r\n      return this.linkHeight * this.activeLinkIndex;\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      linkHeight: 65,\r\n      activeLinkIndex: 0,\r\n      windowWidth: 0,\r\n      isWindows: false,\r\n      hasAutoHeight: false,\r\n      links: [],\r\n    };\r\n  },\r\n  methods: {\r\n    findActiveLink() {\r\n      this.links.forEach((link, index) => {\r\n        if (link.isActive()) {\r\n          this.activeLinkIndex = index;\r\n        }\r\n      });\r\n    },\r\n    addLink(link) {\r\n      const index = this.$slots.links.indexOf(link.$vnode);\r\n      this.links.splice(index, 0, link);\r\n    },\r\n    removeLink(link) {\r\n      const index = this.links.indexOf(link);\r\n      if (index > -1) {\r\n        this.links.splice(index, 1);\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n    this.$watch(\"$route\", this.findActiveLink, {\r\n      immediate: true,\r\n    });\r\n  },\r\n};\r\n",{"version":3,"sources":["SideBar.vue"],"names":[],"mappings":";AAuCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SideBar.vue","sourceRoot":"src/components/SidebarPlugin","sourcesContent":["<template>\r\n  <div\r\n    class=\"sidebar\"\r\n    :data-background-color=\"backgroundColor\"\r\n    :data-active-color=\"activeColor\"\r\n  >\r\n    <!--\r\n            Tip 1: you can change the color of the sidebar's background using: data-background-color=\"white | black | darkblue\"\r\n            Tip 2: you can change the color of the active button using the data-active-color=\"primary | info | success | warning | danger\"\r\n        -->\r\n    <!-- -->\r\n    <div class=\"sidebar-wrapper\" id=\"style-3\">\r\n      <div class=\"logo\">\r\n        <a href=\"#\" class=\"simple-text\">\r\n          <div class=\"logo-img\">\r\n            <img src=\"@/assets/img/vue-logo.png\" alt=\"\" />\r\n          </div>\r\n          {{ title }}\r\n        </a>\r\n      </div>\r\n      <slot> </slot>\r\n      <ul class=\"nav\">\r\n        <!--By default vue-router adds an active class to each route link. This way the links are colored when clicked-->\r\n        <slot name=\"links\">\r\n          <sidebar-link\r\n            v-for=\"(link, index) in sidebarLinks\"\r\n            :key=\"index\"\r\n            :to=\"link.path\"\r\n            :name=\"link.name\"\r\n            :icon=\"link.icon\"\r\n          >\r\n          </sidebar-link>\r\n        </slot>\r\n      </ul>\r\n      <moving-arrow :move-y=\"arrowMovePx\"> </moving-arrow>\r\n    </div>\r\n  </div>\r\n</template>\r\n<script>\r\nimport MovingArrow from \"./MovingArrow.vue\";\r\nimport SidebarLink from \"./SidebarLink\";\r\nexport default {\r\n  props: {\r\n    title: {\r\n      type: String,\r\n      default: \"Reboot2 Noble\",\r\n    },\r\n    backgroundColor: {\r\n      type: String,\r\n      default: \"black\",\r\n      validator: (value) => {\r\n        let acceptedValues = [\"white\", \"black\", \"darkblue\"];\r\n        return acceptedValues.indexOf(value) !== -1;\r\n      },\r\n    },\r\n    activeColor: {\r\n      type: String,\r\n      default: \"success\",\r\n      validator: (value) => {\r\n        let acceptedValues = [\r\n          \"primary\",\r\n          \"info\",\r\n          \"success\",\r\n          \"warning\",\r\n          \"danger\",\r\n        ];\r\n        return acceptedValues.indexOf(value) !== -1;\r\n      },\r\n    },\r\n    sidebarLinks: {\r\n      type: Array,\r\n      default: () => [],\r\n    },\r\n    autoClose: {\r\n      type: Boolean,\r\n      default: true,\r\n    },\r\n  },\r\n  provide() {\r\n    return {\r\n      autoClose: this.autoClose,\r\n      addLink: this.addLink,\r\n      removeLink: this.removeLink,\r\n    };\r\n  },\r\n  components: {\r\n    MovingArrow,\r\n    SidebarLink,\r\n  },\r\n  computed: {\r\n    /**\r\n     * Styles to animate the arrow near the current active sidebar link\r\n     * @returns {{transform: string}}\r\n     */\r\n    arrowMovePx() {\r\n      return this.linkHeight * this.activeLinkIndex;\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      linkHeight: 65,\r\n      activeLinkIndex: 0,\r\n      windowWidth: 0,\r\n      isWindows: false,\r\n      hasAutoHeight: false,\r\n      links: [],\r\n    };\r\n  },\r\n  methods: {\r\n    findActiveLink() {\r\n      this.links.forEach((link, index) => {\r\n        if (link.isActive()) {\r\n          this.activeLinkIndex = index;\r\n        }\r\n      });\r\n    },\r\n    addLink(link) {\r\n      const index = this.$slots.links.indexOf(link.$vnode);\r\n      this.links.splice(index, 0, link);\r\n    },\r\n    removeLink(link) {\r\n      const index = this.links.indexOf(link);\r\n      if (index > -1) {\r\n        this.links.splice(index, 1);\r\n      }\r\n    },\r\n  },\r\n  mounted() {\r\n    this.$watch(\"$route\", this.findActiveLink, {\r\n      immediate: true,\r\n    });\r\n  },\r\n};\r\n</script>\r\n<style></style>\r\n"]}]}